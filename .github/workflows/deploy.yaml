#/.github/workflows/deploy.yaml

name: CI/CD Pipeline

on:
  push:
    branches:
      - feature-lhj

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Write environment files
        run: |
          echo "${{ secrets.APPLICATIONPRIVATE }}" > src/main/resources/application-private.properties
        shell: bash

      - name: create-json
        id: create-json
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: "persuasive-feat-426613-s5-a789fe6d3bc5.json"
          json: ${{ secrets.PERSUASIVE }}
          dir: "src/main/resources/"

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: |
          docker build -t yoonjaehwan/idesign:latest .
          docker push yoonjaehwan/idesign:latest

      - name: SSH Commands
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            cd IDesign

            # 현재 실행 중인 컨테이너의 이미지 확인
            CURRENT_IMAGE=$(sudo docker ps -q | xargs sudo docker inspect -f '{{.Config.Image}}' | grep -E 'blue|green')

            if echo "$CURRENT_IMAGE" | grep -q 'blue'; then
              echo "Current container is blue. Switching to Green..."
              
              # 'blue' 컨테이너가 실행 중인 경우, 'green'으로 변경
              sudo docker-compose -f docker-compose.green.yml pull
              sudo docker-compose -f docker-compose.green.yml up -d
              
              # Nginx 설정 파일을 green으로 업데이트
              sudo cp ./nginx/nginx.green.conf ./nginx/nginx.conf
              
              # 이전 컨테이너 제거
              sudo docker-compose -f docker-compose.blue.yml down
              
            elif echo "$CURRENT_IMAGE" | grep -q 'green'; then
              echo "Current container is green. Switching to Blue..."
              
              # 'green' 컨테이너가 실행 중인 경우, 'blue'으로 변경
              sudo docker-compose -f docker-compose.blue.yml pull
              sudo docker-compose -f docker-compose.blue.yml up -d
              
              # Nginx 설정 파일을 blue로 업데이트
              sudo cp ./nginx/nginx.blue.conf ./nginx/nginx.conf
              
              # 이전 컨테이너 제거
              sudo docker-compose -f docker-compose.green.yml down
              
            else
              echo "Start Init Process"

              # 모든 실행 중인 컨테이너 중지 및 제거
              RUNNING_CONTAINERS=$(sudo docker ps -q)
              if [ -n "$RUNNING_CONTAINERS" ]; then
                echo "Stopping and removing running containers..."
                sudo docker stop $RUNNING_CONTAINERS
                sudo docker rm $RUNNING_CONTAINERS
              fi

              # 초기화 및 실행
              sudo docker-compose -f ./docker-compose/docker-compose.db.yml pull
              sudo docker-compose -f ./docker-compose/docker-compose.db.yml up -d

              sudo docker-compose -f ./docker-compose/docker-compose.nginx.yml pull
              sudo docker-compose -f ./docker-compose/docker-compose.nginx.yml up -d
              
              sudo docker-compose -f ./docker-compose/docker-compose.blue.yml pull
              sudo docker-compose -f ./docker-compose/docker-compose.blue.yml up -d
            fi
      #
      #
      #
      #
      #
      #
      #

      # sudo docker-compose down
      # sudo docker-compose down || true
      # CONTAINERS=$(sudo docker ps -a -q)

      # #컨테이너가 있다면 실행
      # if [ -n "$CONTAINERS" ]; then
      #   sudo docker rm -f $CONTAINERS
      # fi
      # IMAGES=$(sudo docker images -q)

      # #이미지가 있다면 실행
      # if [ -n "$IMAGES" ]; then
      #   sudo docker rmi -f $IMAGES
      # fi
      # sudo docker pull yoonjaehwan/idesign:latest
      # DEBUG=1 sudo docker-compose up --build -d

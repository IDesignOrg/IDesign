#/.github/workflows/deploy.yaml

name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Write environment files
        run: |
          echo "${{ secrets.APPLICATIONPRIVATE }}" > src/main/resources/application-private.properties
          echo "${{ secrets.APPLICATIONPROD }}" > src/main/resources/application-prod.properties

        shell: bash

      - name: create-json
        id: create-json
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: "secure-sorter-435306-m4-acbd4a53fc25.json"
          json: ${{ secrets.GCSFILE }}
          dir: "src/main/resources/"

      - name: "json 권한 설정"
        run: |
          sudo chmod 644 src/main/resources/secure-sorter-435306-m4-acbd4a53fc25.json

      - name: List files in resources
        run: |
          echo "Files in src/main/resources/:"
          ls src/main/resources/

      - name: "build three files"
        run: |
          cd src/main/resources
          npm install
          npm run build

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Check if JSON file exists in JAR
        run: |
          jar tf build/libs/app.jar | grep secure-sorter-435306-m4-acbd4a53fc25.json || echo "File not found"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get Public IP
        id: ip
        run: |
          echo "::set-output name=ip::$(curl -s ifconfig.me)"

      - name: Debug Public IP
        run: |
          echo "Public IP is ${{ steps.ip.outputs.ip }}"
          echo "CIDR Block is ${{ steps.ip.outputs.ip }}/32"

      - name: Add GitHub Actions IP to Security Group
        run: |
          echo "Public IP is ${{ steps.ip.outputs.ip }}"
          if [ -z "${{ steps.ip.outputs.ip }}" ]; then
            echo "Public IP not found. Exiting..."
            exit 1
          fi
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_ID }} \
            --protocol tcp \
            --port 3306 \
            --cidr ${{ steps.ip.outputs.ip }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-northeast-2

      - name: Build and push Docker images
        run: |
          docker build -t yoonjaehwan/idesign:latest .
          docker push yoonjaehwan/idesign:latest

      - name: SSH Commands
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            set -x  # Debug mode enabled
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            cd IDesign
            IMAGE_NAME="yoonjaehwan/idesign:latest"
            docker pull $IMAGE_NAME
            # git pull origin feature-lhj
            EXIST_BLUE=$(docker ps --filter "name=idesign_blue" --filter "status=running" -q)
            EXIST_GREEN=$(docker ps --filter "name=idesign_green" --filter "status=running" -q)


            if [ -z "$EXIST_BLUE" ] && [ -z "$EXIST_GREEN" ]; then
              # 블루 그린 둘다 없으면
              docker-compose -f docker-compose.yml up -d
              sudo cp ./nginx/nginx.blue.conf /etc/nginx/nginx.conf
              sudo nginx -s reload


            elif [ -n "$EXIST_BLUE" ]; then
              # Green 환경으로 전환
              # 새로운 컨테이너를 배경에서 실행 (정지하지 않고)
              sudo docker-compose -f ./dockercompose/docker-compose.green.yml up -d 

              # Healthcheck 새로운 컨테이너가 준비됐는지 확인
              while ! curl -s http://localhost:8082/healthcheck; do
                echo "Waiting for green container to be ready..."
                sleep 10
              done

              # 기존 Blue 컨테이너 종료
              sudo docker stop idesign_blue
              sudo docker remove idesign_blue

              sudo cp ./nginx/nginx.green.conf /etc/nginx/nginx.conf
              sudo nginx -s reload

            elif [ -n "$EXIST_GREEN" ]; then
              # Blue 환경으로 전환
              sudo docker-compose -f ./dockercompose/docker-compose.blue.yml up -d 

              while ! curl -s http://localhost:8081/healthcheck; do
                echo "Waiting for blue container to be ready..."
                sleep 5
              done

              # 기존 Green 컨테이너 종료
              sudo docker stop idesign_green
              sudo docker remove idesign_green

              sudo cp ./nginx/nginx.blue.conf /etc/nginx/nginx.conf
              sudo nginx -s reload
            fi

      - name: Remove GitHub Actions IP from Security Group
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_ID }} \
            --protocol tcp \
            --port 3306 \
            --cidr ${{ steps.ip.outputs.ip }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-northeast-2

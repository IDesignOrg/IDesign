plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.github.node-gradle.node' version '3.2.1'
}

group = 'com.my'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = '17'
}



repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url "https://plugins.gradle.org/m2" }
}

/* Node.js 및 npm 설정 */
// node {
//     download = false
//     version = "20.16.0"
//     npmVersion = "10.8.1"
//     npmWorkDir = file("${project.projectDir}/.gradle/npm")
//     nodeModulesDir = file("${project.projectDir}/src/main/resources")
// }

/* 프론트엔드 빌드 전 작업 */
task cleanDist(type: Delete) {
    delete fileTree("${project.projectDir}/src/main/resources/dist")
}

/* Webpack 빌드 작업 */
// task npmBuild(type: NpmTask) {
//     // dependsOn cleanDist
//     // args = ['run', 'build']
//     // workingDir = file("${project.projectDir}/src/main/resources")
//     // doFirst {
//     //     npmInstall() // npm 설치를 보장
//     // }
// }

dependencies {
    // Spring Data JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // Thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    //Spring boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // MariaDB
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.2.0'
    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // OAuth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    // Google Mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    // WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    // Spring Boot Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // Spring Cloud GCP
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter', version: '1.2.5.RELEASE'
    // GCS Storage
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-gcp-storage', version: '1.2.5.RELEASE'
    // IAMPORT 결제
    implementation 'com.github.iamport:iamport-rest-client-java:0.2.21'
    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jpa'
}

/* Webpack 빌드 및 서버 실행 태스크 */
task webpackBuild(type: Exec) {
    inputs.file("package-lock.json").withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.dir("src").withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file("webpack.config.js")
    outputs.dir("dist")
    commandLine "npx", "webpack", "--display-error-details"
    workingDir = file("${project.projectDir}/src/main/resources")
}

task webpackServer(type: Exec, dependsOn: webpackBuild) {
    commandLine "npx", "webpack-dev-server", "--config", "./webpack.config.js"
    workingDir = file("${project.projectDir}/src/main/resources")
}

/* 프론트엔드 빌드 후 패키징 */
// task packageFrontend(type: Zip, dependsOn: npmBuild) {
task packageFrontend(type: Zip) {
    from fileTree("${project.projectDir}/src/main/resources/dist")
    include '**/*'
    archiveFileName.set("${rootProject.name}-frontend.zip")
    destinationDirectory.set(file("${buildDir}"))
}

/* 전체 정리 작업 */
task cleanAll(type: Delete) {
    delete fileTree('build')
    delete fileTree('dist')
}

/* 테스트 설정 */
test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    dependsOn cleanAll
}

/* Spring Boot 빌드 시 npmBuild 실행 */
bootJar {
    archiveFileName.set("app.jar")
    // dependsOn npmBuild
}

//한번 추가해봄
jar {
    enabled=false
}